<!-- XML Document Type Definition 

     Authors: 
       Yannick Parmentier <Yannick.Parmentier@loria.fr>
 
     Description:
       XML Encoding of semi-automatically generated Multi-Components Tree Adjoining Grammars

     Acknowledgment:
       This DTD derives from DTDs written by Denys Duchier <Duchier@loria.fr> and        
       Joseph Le Roux <Joseph.Leroux@loria.fr>

     Version: 1.2

     Typical usage:  

            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE grammar SYSTEM "xmg-mctag.dtd,xml">
	    <grammar>
            ...
            </grammar>

     Notes:
       A compiled Multi-Components Tree Adjoining Grammar (mcgrammar)
       consists either 
       of a list of morphological entries, 
       or a list of lemmas 
       or a list of of Multi-Components sets (mcsets), each one
            consisting of one or more entries. 

       An entry represents an elementary tree of the grammar.	
       More precisely, an entry contains a list of the following data : 

       - a family name determining to which tree-family it belongs,

       - a trace containing the names of the meta-grammar classes that were 
         combined,

       - a syntactic description giving the structure of the tree,

       - a semantic description expressed in flat semantics (set of literals),

       - an interface consisting of an attributes-values matrix whose features 
         are shared with features in the tree (used for anchoring).
               
-->

<!-- Compiled grammar -->

<!ELEMENT  mcgrammar (morphs?|lemmas?|(entry* , mcset*))>

<!-- Potential lexicon entries (lemma or morph) -->

<!ELEMENT  morphs  (morph*)>
<!ELEMENT  lemmas  (lemma*)>

<!-- morphological entries in lexicon -->

<!ELEMENT  morph  (lemmaref+)>
<!ATTLIST  morph   lex    CDATA   #REQUIRED>

<!-- lemma entries -->

<!ELEMENT  lemma  (anchor+)>
<!ATTLIST  lemma   name   CDATA   #REQUIRED
                   cat    CDATA   #REQUIRED>      

<!-- references to lemma entries  in morp entries -->

<!ELEMENT  lemmaref  (fs?)>
<!ATTLIST  lemmaref   name   CDATA   #REQUIRED
                      cat    CDATA   #REQUIRED>

<!-- anchoring constraints in lemma -->

<!ELEMENT  anchor  (filter?, coanchor*, equation*, sem?)>
<!ATTLIST  anchor   tree_id   CDATA   #REQUIRED>

<!-- filters to select trees -->

<!ELEMENT  filter  (fs?)>

<!-- syntax/semantic interface in the lemma lexicon -->

<!ELEMENT  sem	(semclass*)>

<!-- semantic class instantiation -->

<!ELEMENT  semclass		(args)>
<!ATTLIST  semclass 	name	CDATA	#REQUIRED>

<!-- list of arguments for the instantiation -->

<!ELEMENT args (f*)>

<!-- lexical constraint in anchors -->

<!ELEMENT  coanchor  (lex+)>
<!ATTLIST  coanchor   node_id   CDATA   #REQUIRED>

<!-- lexical value -->

<!ELEMENT  lex  (#PCDATA)>

<!-- unification constraint in anchors -->

<!ELEMENT  equation  (fs)>
<!ATTLIST  equation   type     ( top | bot )  #REQUIRED
                      node_id  CDATA    #REQUIRED>


<!-- Potential mcset (set of trees) -->

<!ELEMENT  mcset  (entry*)>
<!ATTLIST  mcset  id   CDATA #REQUIRED>

<!-- Entries -->

<!ELEMENT  entry  (family,trace,tree,semantics,interface)>
<!ATTLIST  entry  name  ID  #REQUIRED>
<!ATTLIST  entry  type  (anc | noanc)  #IMPLIED>

<!-- Values (tree families) -->

<!ELEMENT  family  (#PCDATA)>

<!-- Traces of compilation -->

<!ELEMENT  trace  (class*)>

<!ELEMENT  class  (#PCDATA)>

<!-- syntactic descriptions (the templates) -->

<!ELEMENT  tree  (node)>
<!ATTLIST  tree  id  CDATA  #REQUIRED>

<!ELEMENT  node  (narg? , node*)>
<!ATTLIST  node  type ( nadj | std | subst | lex | anchor | coanchor | foot | nadjanc | nadjcoanc ) #REQUIRED>
<!ATTLIST  node  name  CDATA #IMPLIED>

<!ELEMENT  narg (fs)>

<!ELEMENT  fs  (f*)>
<!ATTLIST  fs  coref CDATA #IMPLIED>

<!ELEMENT  f  (sym | vAlt | fs)>
<!ATTLIST  f  name  CDATA #REQUIRED>

<!ELEMENT  vAlt  (sym+)>
<!ATTLIST  vAlt  coref CDATA "">

<!ELEMENT  sym EMPTY>
<!ATTLIST  sym 
	   value   CDATA #IMPLIED
	   varname CDATA #IMPLIED>

<!-- semantic representations -->

<!ELEMENT  semantics  (literal | sym | semdominance)*>

<!ELEMENT  literal   (label? , predicate, arg*)>
<!ATTLIST  literal   negated  CDATA  "no">

<!ELEMENT  label  (sym)>

<!ELEMENT  predicate  (sym)>

<!ELEMENT  arg  (sym | fs)>

<!ELEMENT  semdominance  (sym+)>
<!ATTLIST  semdominance  op   CDATA   "ge">

<!-- Interfaces -->

<!ELEMENT interface  (fs?)>
